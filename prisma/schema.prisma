// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  phone     String?
  role      UserRole @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders    Order[]
  reviews   Review[]
  reservations Reservation[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  image       String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  menuItems MenuItem[]

  @@map("categories")
}

model MenuItem {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  image       String?
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category    Category @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
  reviews     Review[]

  @@map("menu_items")
}

model Order {
  id          String      @id @default(cuid())
  userId      String?
  status      OrderStatus @default(PENDING)
  totalAmount Float
  deliveryFee Float       @default(0)
  taxAmount   Float       @default(0)
  finalAmount Float
  notes       String?
  deliveryAddress String?
  phone       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user        User?       @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
  payments    Payment[]

  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  menuItemId String
  quantity  Int
  price     Float
  notes     String?
  createdAt DateTime @default(now())

  // Relations
  order     Order    @relation(fields: [orderId], references: [id])
  menuItem  MenuItem @relation(fields: [menuItemId], references: [id])

  @@map("order_items")
}

model Payment {
  id          String       @id @default(cuid())
  orderId     String
  amount      Float
  method      PaymentMethod
  status      PaymentStatus @default(PENDING)
  transactionId String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  order       Order        @relation(fields: [orderId], references: [id])

  @@map("payments")
}

model Table {
  id          String   @id @default(cuid())
  number      Int
  capacity    Int
  location    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  reservations Reservation[]

  @@map("tables")
}

model Reservation {
  id          String           @id @default(cuid())
  userId      String?
  tableId     String
  date        DateTime
  time        DateTime
  numberOfGuests Int
  status      ReservationStatus @default(PENDING)
  specialRequests String?
  phone       String?
  email       String?
  name        String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  user        User?            @relation(fields: [userId], references: [id])
  table       Table            @relation(fields: [tableId], references: [id])

  @@map("reservations")
}

model Review {
  id        String   @id @default(cuid())
  userId    String?
  menuItemId String?
  rating    Int      // 1-5 stars
  comment   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User?     @relation(fields: [userId], references: [id])
  menuItem  MenuItem? @relation(fields: [menuItemId], references: [id])

  @@map("reviews")
}

model RestaurantInfo {
  id          String   @id @default(cuid())
  name        String
  description String?
  address     String?
  phone       String?
  email       String?
  website     String?
  logo        String?
  coverImage  String?
  openingHours String? // JSON string for hours
  socialMedia String? // JSON string for social media links
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("restaurant_info")
}

// Enums
enum UserRole {
  CUSTOMER
  STAFF
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  MOBILE_PAYMENT
  ONLINE_PAYMENT
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}